[
    {
        "question": "What is frontend development?",
        "answer": "Frontend development refers to the process of creating the user interface and user experience aspects of a website or web application. It involves working with technologies like HTML, CSS, and JavaScript to create visually appealing and interactive web pages."
    },
    {
        "question": "What languages are used in frontend development?",
        "answer": "The primary languages used in frontend development are HTML (HyperText Markup Language), CSS (Cascading Style Sheets), and JavaScript. HTML is used for structuring content, CSS for styling, and JavaScript for adding interactivity."
    },
    {
        "question": "What are some popular frontend frameworks and libraries?",
        "answer": "Some popular frontend frameworks and libraries include React, Angular, and Vue.js. These tools help developers build complex user interfaces more efficiently by providing reusable components and structured approaches to coding."
    },
    {
        "question": "What is responsive design?",
        "answer": "Responsive design is an approach to web design that ensures web pages look and function well on a variety of devices and screen sizes. This is achieved using flexible layouts, media queries, and responsive images."
    },
    {
        "question": "What are CSS preprocessors?",
        "answer": "CSS preprocessors are scripting languages that extend CSS by allowing developers to write code in a more maintainable and modular way. Popular CSS preprocessors include Sass (Syntactically Awesome Stylesheets) and Less."
    },
    {
        "question": "What is the Document Object Model (DOM)?",
        "answer": "The Document Object Model (DOM) is a programming interface for web documents. It represents the structure of a web page as a tree of objects, allowing developers to manipulate the content and structure of a website dynamically using JavaScript."
    },
    {
        "question": "What is the role of a frontend developer?",
        "answer": "A frontend developer is responsible for implementing the visual and interactive elements of a website or web application. This includes translating design mockups into code, ensuring cross-browser compatibility, optimizing performance, and enhancing user experience."
    },
    {
        "question": "What tools are commonly used by frontend developers?",
        "answer": "Frontend developers commonly use a variety of tools, including code editors (like Visual Studio Code), version control systems (like Git), build tools (like Webpack), and package managers (like npm or Yarn). They may also use design tools (like Figma or Adobe XD) to collaborate with designers."
    },
    {
        "question": "What is the difference between frontend and backend development?",
        "answer": "Frontend development focuses on the client-side, which includes everything that users interact with directly in their web browsers. Backend development, on the other hand, focuses on the server-side, which involves managing databases, server logic, and application performance."
    },
    {
        "question": "How can I optimize the performance of a web application?",
        "answer": "To optimize the performance of a web application, you can minimize the size of assets (like images and scripts), use lazy loading for images and components, leverage browser caching, optimize CSS and JavaScript, and use Content Delivery Networks (CDNs) to distribute content more efficiently."
    },
    {
        "question": "What is React?",
        "answer": "React is a popular JavaScript library for building user interfaces, especially single-page applications. It allows developers to create reusable UI components and efficiently update the UI when data changes."
    },
    {
        "question": "What is a component in React?",
        "answer": "A component in React is a reusable, self-contained piece of UI that can manage its own state and logic. Components can be functional or class-based."
    },
    {
        "question": "What is JSX?",
        "answer": "JSX stands for JavaScript XML. It is a syntax extension for JavaScript that allows you to write HTML-like code within JavaScript files, which React then transforms into JavaScript objects."
    },
    {
        "question": "What are props in React?",
        "answer": "Props (short for properties) are read-only inputs passed from a parent component to a child component in React. They allow data to flow between components."
    },
    {
        "question": "What is state in React?",
        "answer": "State is a built-in object in React components that allows components to create and manage their own data. When state changes, the component re-renders to reflect the new data."
    },
    {
        "question": "What is the difference between state and props?",
        "answer": "Props are passed to a component by its parent and are read-only, while state is managed within the component and can be changed by the component itself."
    },
    {
        "question": "What is a hook in React?",
        "answer": "Hooks are special functions introduced in React 16.8 that let you use state and other React features in functional components. Common hooks include useState, useEffect, and useContext."
    },
    {
        "question": "What does useState do?",
        "answer": "The useState hook lets you add state to functional components. It returns a state variable and a function to update it."
    },
    {
        "question": "What does useEffect do?",
        "answer": "The useEffect hook lets you perform side effects in functional components, such as fetching data, updating the DOM, or setting up subscriptions."
    },
    {
        "question": "What is the virtual DOM?",
        "answer": "The virtual DOM is a lightweight copy of the actual DOM maintained by React. When state or props change, React updates the virtual DOM first, then efficiently updates only the changed parts of the real DOM."
    },
    {
        "question": "What is a key in React lists?",
        "answer": "A key is a special string attribute you need to include when creating lists of elements in React. Keys help React identify which items have changed, are added, or are removed."
    },
    {
        "question": "What is prop drilling?",
        "answer": "Prop drilling is the process of passing data from a parent component down to deeply nested child components through multiple layers of props, which can make code harder to maintain."
    },
    {
        "question": "What is context in React?",
        "answer": "Context provides a way to pass data through the component tree without having to pass props down manually at every level. It is useful for global data like themes or authentication."
    },
    {
        "question": "What is Redux?",
        "answer": "Redux is a state management library often used with React. It provides a centralized store for application state and predictable ways to update that state."
    },
    {
        "question": "What is React Router?",
        "answer": "React Router is a library for routing in React applications. It enables navigation between different components and URLs in a single-page application."
    },
    {
        "question": "What is a controlled component in React?",
        "answer": "A controlled component is a form element whose value is controlled by React state. The value of the input is set by the state, and changes are handled by updating the state."
    },
    {
        "question": "What is an uncontrolled component in React?",
        "answer": "An uncontrolled component is a form element that manages its own state internally, rather than relying on React state. You access the value using refs."
    },
    {
        "question": "What is the useRef hook?",
        "answer": "The useRef hook returns a mutable ref object whose .current property is initialized to the passed argument. It can be used to access DOM elements directly or persist values across renders."
    },
    {
        "question": "What is the useContext hook?",
        "answer": "The useContext hook allows you to access the value of a React context directly in a functional component, without needing to use a Context.Consumer."
    },
    {
        "question": "What is the useMemo hook?",
        "answer": "The useMemo hook returns a memoized value. It only recalculates the value when one of its dependencies changes, which can help optimize performance for expensive calculations."
    },
    {
        "question": "What is the useCallback hook?",
        "answer": "The useCallback hook returns a memoized callback function. It only recreates the function when one of its dependencies changes, which can help prevent unnecessary re-renders."
    },
    {
        "question": "What is React Fragment?",
        "answer": "A React Fragment is a wrapper component that lets you group multiple elements without adding extra nodes to the DOM. You can use <React.Fragment> or the shorthand <>.</>"
    },
    {
        "question": "What is reconciliation in React?",
        "answer": "Reconciliation is the process by which React updates the DOM with changes to the virtual DOM. React compares the new virtual DOM with the previous one and updates only the parts that have changed."
    },
    {
        "question": "What is the difference between class and functional components?",
        "answer": "Class components are ES6 classes that extend React.Component and can have lifecycle methods and state. Functional components are plain JavaScript functions that can use hooks to manage state and side effects."
    },
    {
        "question": "What are React lifecycle methods?",
        "answer": "Lifecycle methods are special methods in class components that are called at different stages of a component's life, such as componentDidMount, componentDidUpdate, and componentWillUnmount."
    },
    {
        "question": "How do you handle events in React?",
        "answer": "Events in React are handled using camelCase syntax and passing a function as the event handler. For example, <button onClick={handleClick}>Click me</button>."
    },
    {
        "question": "What is conditional rendering in React?",
        "answer": "Conditional rendering in React means displaying different UI elements or components based on certain conditions, usually using JavaScript operators like if, &&, or ternary (?:)."
    },
    {
        "question": "What is lazy loading in React?",
        "answer": "Lazy loading in React is a technique to load components only when they are needed, which can improve performance. React provides React.lazy and Suspense for this purpose."
    },
    {
        "question": "What is error boundary in React?",
        "answer": "An error boundary is a React component that catches JavaScript errors anywhere in its child component tree and displays a fallback UI instead of crashing the whole app."
    },
    {
        "question": "What is server-side rendering (SSR) in React?",
        "answer": "Server-side rendering is the process of rendering React components on the server and sending the HTML to the client, which can improve performance and SEO. Next.js is a popular framework for SSR with React."
    },
    {
        "question": "What is hydration in React?",
        "answer": "Hydration is the process of attaching event listeners to server-rendered HTML so it becomes fully interactive on the client side."
    },
    {
        "question": "What is the difference between useEffect and useLayoutEffect?",
        "answer": "useEffect runs asynchronously after the DOM has been updated, while useLayoutEffect runs synchronously after all DOM mutations but before the browser paints. useLayoutEffect is useful for reading layout and synchronously re-rendering."
    },
    {
        "question": "How do you optimize React app performance?",
        "answer": "You can optimize React app performance by using React.memo, useMemo, useCallback, code splitting, lazy loading, avoiding unnecessary re-renders, and optimizing component structure."
    },
    {
        "question": "What is React Portal?",
        "answer": "A React Portal allows you to render children into a DOM node that exists outside the DOM hierarchy of the parent component, which is useful for modals, tooltips, and overlays."
    },
    {
        "question": "What is the difference between controlled and uncontrolled inputs?",
        "answer": "Controlled inputs have their value controlled by React state, while uncontrolled inputs store their own state internally and are accessed via refs."
    },
    {
        "question": "What is the significance of keys in React?",
        "answer": "Keys help React identify which items in a list have changed, are added, or are removed. They should be unique and stable for each list item."
    },
    {
        "question": "What is the useImperativeHandle hook?",
        "answer": "The useImperativeHandle hook customizes the instance value that is exposed to parent components when using refs, allowing you to control what is accessible from the parent."
    },
    {
        "question": "What is prop-types in React?",
        "answer": "Prop-types is a library that allows you to specify the types of props a component should receive, helping catch bugs and improve documentation."
    },
    {
        "question": "What is the difference between React and React Native?",
        "answer": "React is used for building web applications, while React Native is used for building native mobile applications for iOS and Android using React concepts."
    },
    {
        "question": "What is the use of shouldComponentUpdate?",
        "answer": "shouldComponentUpdate is a lifecycle method in class components that lets you control whether a component should re-render when its props or state change."
    },
    {
        "question": "What is the difference between mount and render in React testing?",
        "answer": "In testing, mount renders the full DOM including child components, while render (shallow rendering) only renders the component itself without its children."
    },
    {
        "question": "What is the use of React.StrictMode?",
        "answer": "React.StrictMode is a wrapper component that helps highlight potential problems in an application by activating additional checks and warnings for its descendants."
    }
]